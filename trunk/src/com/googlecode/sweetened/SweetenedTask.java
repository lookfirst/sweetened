package com.googlecode.sweetened;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.types.Path;

/**
 * Controller for the Sweetened ant Task. Sweetened generates
 * .classpath files for Eclipse.
 *
 * @author jon stevens
 */
public class SweetenedTask extends Task
{
    private String file;
    private String kind;
    private String var;
    private String text;
    private String sourcepath;
    private List<Path> classpaths = new ArrayList<Path>();
    private String property = "sweetened";
    private boolean autoGen = true;
    private boolean debug = false;
    
    /** 
     * Make sure everything is setup correctly.
     */
    protected void validate() throws BuildException
    {
        if (classpaths.size() == 0)
        {
            throw new BuildException("Missing classpath element within a sweetened element");
        }
        if (property == null)
        {
            throw new BuildException("Missing the 'property' attribute within the sweetened element definition.");
        }
            
        if (kind.equals("var"))
        {
            if (var == null)
            {
                throw new BuildException("Attibute 'var' cannot be null when kind=\"var\".");
            }
            this.getProject().setProperty(this.getProperty(), this.getFormattedVarPath());
        }
        else if (kind.equals("lib"))
        {
            this.getProject().setProperty(this.getProperty(), this.getFormattedLibPath());
        }
        else
        {
            throw new BuildException("Attribute 'kind' must be either var or lib.");
        }
    }

    /**
     * The main deal.
     */
	@Override
	public void execute() throws BuildException
	{
		try
		{
		    this.validate();

		    String results = this.getProject().replaceProperties(this.getText());
            results = results.trim();
            
            if (isAutoGen())
            {
                String note = "\n<!-- Generated by Sweetened http://sweetened.googlecode.com/ (" + new Date() + ") -->\n";
                results = results.replace("\"?>", "\"?>" + note);
            }
            if (isDebug())
                log(results);

            FileOutputStream fos = new FileOutputStream(new File(this.getFile()));
            fos.write(results.getBytes("UTF-8"));
            fos.close();
		}
		catch (Exception e)
		{
			throw new BuildException(e);
		}
	}
	
    /** 
     * Override this method if you would like to format things
     * differently.
     */
	protected String getFormattedVarPath()
	{
	    StringBuilder sb = new StringBuilder();
	    
	    for (String jar : this.getJars())
	    {
	        String filename = new File(jar).getName();
	        sb.append("<classpathentry kind=\"var\" ");
	        sb.append("path=\"");
	        sb.append(getVar());
	        sb.append("/");
	        sb.append(filename);
	        sb.append("\"");
	        if (sourcepath != null)
	        {
	            sb.append(" sourcepath=\"/");
	            sb.append(getVar());
	            sb.append("/");
	            sb.append(sourcepath);
                sb.append("/");
                sb.append(filename);
                sb.append("\"");
	        }
	        sb.append("/>\n");
	    }
	    return sb.toString();
	}
	
    /** 
     * Override this method if you would like to format things
     * differently.
     */
	protected String getFormattedLibPath()
	{
	    StringBuffer sb = new StringBuffer();
        for (String jar : this.getJars())
        {
            sb.append("<classpathentry kind=\"lib\" ");
            sb.append("path=\"");
            sb.append(jar);
            sb.append("\"");
            File file = new File(jar);
            if (sourcepath != null)
            {
                String filename = sourcepath + "/" + file.getName();
                String path = file.getAbsolutePath().replace(file.getName(), filename);
                if (new File(path).exists())
                {
                    sb.append(" sourcepath=\"");
                    sb.append(path);
                    sb.append("\"");
                }
            }
            sb.append("/>\n");
        }
        return sb.toString();
	}

    /** 
     * The output file location.
     */
    public void setFile(String file) {
        this.file = file;
    }

    /** 
     * The output file location.
     */
    public String getFile() {
        return file;
    }

    /** 
     * Can be either 'var' or 'lib'. If 'var',
     * then you also need to define the var attribute
     * of this task.
     */
    public void setKind(String kind) {
        this.kind = kind;
    }

    /** 
     * Can be either 'var' or 'lib'. If 'var',
     * then you also need to define the var attribute
     * of this task.
     */
    public String getKind() {
        return kind;
    }

    /** 
     * If kind="var", then define the Eclipse variable
     * that is used to locate the classpath resource.
     */
    public void setVar(String var) {
        this.var = var;
    }

    /** 
     * If kind="var", then define the Eclipse variable
     * that is used to locate the classpath resource.
     */
    public String getVar() {
        return var;
    }

    /**
     * The inner text within the sweetened element.
     */
    public void addText(String text) {
        this.text = text;
    }

    /**
     * The inner text within the sweetened element.
     */
    public String getText() {
        return text;
    }

    /** 
     * The list of ant &lt;classpath&gt; elements.
     */
    public void addClasspath(Path classpath) {
        classpaths.add(classpath);
    }

    /** 
     * The list of ant &lt;classpath&gt; elements.
     */
    public List<Path> getClasspaths() {
        return classpaths;
    }

    /**
     * Combines all the classpath elements into
     * a List of Strings.
     */
    protected List<String> getJars() {
        List<String> jars = new ArrayList<String>();
        for (Path path : getClasspaths())
        {
            jars.addAll(Arrays.asList(path.list()));
        }
        return jars;
    }

    /**
     * Directory name which is appended before the filename of the 
     * jar file being referenced. So, if you have /Users/jon/lib/foo.jar
     * and sourcepath="src", then the sourcepath attribute will be set
     * to /Users/jon/lib/src/foo.jar and that should be where the source
     * code to foo.jar lives.
     */
    public void setSourcepath(String sourcepath) {
        this.sourcepath = sourcepath;
    }

    /**
     * Directory name which is appended before the filename of the 
     * jar file being referenced. So, if you have /Users/jon/lib/foo.jar
     * and sourcepath="src", then the sourcepath attribute will be set
     * to /Users/jon/lib/src/foo.jar and that should be where the source
     * code to foo.jar lives.
     */
    public String getSourcepath() {
        return sourcepath;
    }

    /**
     * Used for overriding the substitution property
     * in the CDATA section.
     */
    public void setProperty(String property) {
        this.property = property;
    }

    /**
     * Used for overriding the substitution property
     * in the CDATA section.
     */
    public String getProperty() {
        return property;
    }

    /**
     * Whether or not you want the generated
     * notice printed out or not. Default is true.
     */
    public void setAutoGen(boolean autoGen) {
        this.autoGen = autoGen;
    }

    /**
     * Whether or not you want the generated
     * notice printed out or not. Default is true.
     */
    public boolean isAutoGen() {
        return autoGen;
    }

    /**
     * Prints the output to stdout.
     */
    public void setDebug(boolean debug) {
        this.debug = debug;
    }

    /**
     * Prints the output to stdout.
     */
    public boolean isDebug() {
        return debug;
    }
}
